import requests
import uuid
import sys, os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from src.services.aes_service import AesService
from src.services.rsa_service import RsaService
from src.models.aes_key import AesKey

# === –ë–∞–∑–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ –Ω–∞—à–æ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ ===
API_BASE = "http://127.0.0.1:8000/api/session"

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ ===
aes_service = AesService()
rsa_service = RsaService()


def get_public_key():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞."""
    resp = requests.get(f"{API_BASE}/init")
    data = resp.json()
    rsa_id = data["rsa_id"]
    public_key = data["public_key"]
    print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ RSA –∫–ª—é—á —ñ–∑ id: {rsa_id[:8]}...")
    return rsa_id, public_key


def perform_handshake(rsa_id, public_key, aes_key, session_id):
    """–í–∏–∫–æ–Ω–∞—Ç–∏ handshake ‚Äî –ø–µ—Ä–µ–¥–∞—Ç–∏ AES –∫–ª—é—á —Ç–∞ IV, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ RSA."""
    encrypted_key = rsa_service.encrypt(public_key, aes_key.key)
    encrypted_iv = rsa_service.encrypt(public_key, aes_key.iv)

    payload = {
        "rsa_id": rsa_id,
        "session_id": session_id,
        "encrypted_key": encrypted_key,
        "encrypted_iv": encrypted_iv,
    }

    resp = requests.post(f"{API_BASE}/handshake", json=payload)
    print("ü§ù Handshake:", resp.json())


def send_encrypted_message(session_id, aes_key, message):
    """–®–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —ñ –≤–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    cipher_text = aes_service.encrypt(aes_key, message)
    headers = {"x-session-id": session_id}
    body = {"cipher_text": cipher_text}

    resp = requests.post(f"{API_BASE}/message", json=body, headers=headers)
    data = resp.json()

    decrypted = aes_service.decrypt(aes_key, data["cipher_text"])
    print(f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:\n{decrypted}\n")


def main():
    print("üîí Secure Console Client Started")

    # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
    rsa_id, public_key = get_public_key()

    # 2. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AES –∫–ª—é—á —ñ session_id
    aes_key = aes_service.generate_secret_key()
    session_id = str(uuid.uuid4())

    # 3. –í–∏–∫–æ–Ω–∞—Ç–∏ handshake
    perform_handshake(rsa_id, public_key, aes_key, session_id)

    # 4. –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    while True:
        msg = input("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ('exit' –¥–ª—è –≤–∏—Ö–æ–¥—É): ")
        if msg.lower() == "exit":
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó.")
            break
        send_encrypted_message(session_id, aes_key, msg)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ===
if __name__ == "__main__":
    main()
