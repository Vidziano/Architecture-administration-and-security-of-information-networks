import sys
import os

# === –î–æ–¥–∞—Ç–∏ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É ===
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import requests
import uuid
import datetime
from src.services.aes_service import AesService
from src.services.rsa_service import RsaService
from src.models.aes_key import AesKey

API_BASE = "http://127.0.0.1:8000/api/session"

aes_service = AesService()
rsa_service = RsaService()

LOG_FILE = "client/client_log.txt"


def log_event(text: str):
    """–ó–∞–ø–∏—Å—É—î –ø–æ–¥—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ —É client_log.txt."""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {text}\n")


def get_public_key():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞."""
    resp = requests.get(f"{API_BASE}/init")
    data = resp.json()
    rsa_id = data["rsa_id"]
    public_key = data["public_key"]
    print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ RSA –∫–ª—é—á —ñ–∑ id: {rsa_id[:8]}...")
    log_event(f"–û—Ç—Ä–∏–º–∞–Ω–æ RSA –∫–ª—é—á —ñ–∑ id: {rsa_id}")
    return rsa_id, public_key


def perform_handshake(rsa_id, public_key, aes_key, session_id):
    """–í–∏–∫–æ–Ω–∞—Ç–∏ handshake ‚Äî –ø–µ—Ä–µ–¥–∞—Ç–∏ AES –∫–ª—é—á —Ç–∞ IV —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    encrypted_key = rsa_service.encrypt(public_key, aes_key.key)
    encrypted_iv = rsa_service.encrypt(public_key, aes_key.iv)

    headers = {
        "x-rsa-id": rsa_id,
        "x-session-id": session_id,
    }

    payload = {
        "encrypted_key": encrypted_key,
        "encrypted_iv": encrypted_iv,
    }

    resp = requests.post(f"{API_BASE}/handshake", json=payload, headers=headers)
    result = resp.json()
    print("ü§ù Handshake:", result)
    log_event(f"Handshake established: {result}")


def send_encrypted_message(session_id, aes_key, message):
    """–®–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —ñ –≤–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    cipher_text = aes_service.encrypt(aes_key, message)
    headers = {"x-session-id": session_id}
    body = {"cipher_text": cipher_text}

    resp = requests.post(f"{API_BASE}/message", json=body, headers=headers)
    data = resp.json()

    decrypted = aes_service.decrypt(aes_key, data["cipher_text"])
    print(f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:\n{decrypted}\n")

    # –ó–∞–ø–∏—Å —É –ª–æ–≥
    log_event(f"Client: {message}")
    log_event(f"Server: {decrypted}")


def main():
    print("üîí Secure Console Client Started")

    # 1Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
    rsa_id, public_key = get_public_key()

    # 2Ô∏è –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AES –∫–ª—é—á —ñ session_id
    aes_key = aes_service.generate_secret_key()
    session_id = str(uuid.uuid4())

    # 3Ô∏è –í–∏–∫–æ–Ω–∞—Ç–∏ handshake
    perform_handshake(rsa_id, public_key, aes_key, session_id)

    # 4Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó
    while True:
        msg = input("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ('exit' –¥–ª—è –≤–∏—Ö–æ–¥—É): ")
        if msg.lower() == "exit":
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó.")
            log_event("–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.\n")
            break
        send_encrypted_message(session_id, aes_key, msg)


if __name__ == "__main__":
    main()
